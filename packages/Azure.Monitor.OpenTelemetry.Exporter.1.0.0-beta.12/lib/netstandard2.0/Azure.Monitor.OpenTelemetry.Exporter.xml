<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>Azure.Monitor.OpenTelemetry.Exporter</name>
    </assembly>
    <members>
        <member name="T:Azure.Monitor.OpenTelemetry.Exporter.AzureMonitorExporterLoggingExtensions">
            <summary>
            Extension methods to simplify registering of Azure Monitor Log Exporter.
            </summary>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.AzureMonitorExporterLoggingExtensions.AddAzureMonitorLogExporter(OpenTelemetry.Logs.OpenTelemetryLoggerOptions,System.Action{Azure.Monitor.OpenTelemetry.Exporter.AzureMonitorExporterOptions},Azure.Core.TokenCredential)">
            <summary>
            Adds Azure Monitor Log Exporter with OpenTelemetryLoggerOptions.
            </summary>
            <param name="loggerOptions"><see cref="T:OpenTelemetry.Logs.OpenTelemetryLoggerOptions" /> options to use.</param>
            <param name="configure">Exporter configuration options.</param>
            <param name="credential">
            An Azure <see cref="T:Azure.Core.TokenCredential" /> capable of providing an OAuth token.
            Note: if a credential is provided to both <see cref="T:Azure.Monitor.OpenTelemetry.Exporter.AzureMonitorExporterOptions" /> and this parameter,
            the Options will take precedence.
            </param>
            <returns>The instance of <see cref="T:OpenTelemetry.Logs.OpenTelemetryLoggerOptions" /> to chain the calls.</returns>
        </member>
        <member name="T:Azure.Monitor.OpenTelemetry.Exporter.AzureMonitorExporterMetricExtensions">
            <summary>
            Extension methods to simplify registering of Azure Monitor Metrics Exporter.
            </summary>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.AzureMonitorExporterMetricExtensions.AddAzureMonitorMetricExporter(OpenTelemetry.Metrics.MeterProviderBuilder,System.Action{Azure.Monitor.OpenTelemetry.Exporter.AzureMonitorExporterOptions},Azure.Core.TokenCredential,System.String)">
            <summary>
            Adds Azure Monitor Metric exporter.
            </summary>
            <param name="builder"><see cref="T:OpenTelemetry.Metrics.MeterProviderBuilder" /> builder to use.</param>
            <param name="configure">Exporter configuration options.</param>
            <param name="credential">
            An Azure <see cref="T:Azure.Core.TokenCredential" /> capable of providing an OAuth token.
            Note: if a credential is provided to both <see cref="T:Azure.Monitor.OpenTelemetry.Exporter.AzureMonitorExporterOptions" /> and this parameter,
            the Options will take precedence.
            </param>
            <param name="name">Name which is used when retrieving options.</param>
            <returns>The instance of <see cref="T:OpenTelemetry.Metrics.MeterProviderBuilder" /> to chain the calls.</returns>
        </member>
        <member name="T:Azure.Monitor.OpenTelemetry.Exporter.AzureMonitorExporterOptions">
            <summary>
            Options that allow users to configure the Azure Monitor Exporter.
            </summary>
        </member>
        <member name="F:Azure.Monitor.OpenTelemetry.Exporter.AzureMonitorExporterOptions.LatestVersion">
            <summary>
            The latest service version supported by this library.
            </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.AzureMonitorExporterOptions.ConnectionString">
            <summary>
            The Connection String provides users with a single configuration setting to identify the Azure Monitor resource and endpoint.
            </summary>
            <remarks>
            (https://docs.microsoft.com/azure/azure-monitor/app/sdk-connection-string).
            </remarks>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.AzureMonitorExporterOptions.Credential">
            <summary>
            Get or sets the value of <see cref="T:Azure.Core.TokenCredential" />.
            </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.AzureMonitorExporterOptions.Version">
            <summary>
            The <see cref="T:Azure.Monitor.OpenTelemetry.Exporter.AzureMonitorExporterOptions.ServiceVersion" /> of the Azure Monitor ingestion API.
            </summary>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.AzureMonitorExporterOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Monitor.OpenTelemetry.Exporter.AzureMonitorExporterOptions" />.
            </summary>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.AzureMonitorExporterOptions.#ctor(Azure.Monitor.OpenTelemetry.Exporter.AzureMonitorExporterOptions.ServiceVersion)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Monitor.OpenTelemetry.Exporter.AzureMonitorExporterOptions" />.
            </summary>
            <param name="version">The <see cref="T:Azure.Monitor.OpenTelemetry.Exporter.AzureMonitorExporterOptions.ServiceVersion" /> of the Azure Monitor ingestion API.</param>
        </member>
        <member name="T:Azure.Monitor.OpenTelemetry.Exporter.AzureMonitorExporterOptions.ServiceVersion">
            <summary>
            The versions of Azure Monitor supported by this client library.
            </summary>
        </member>
        <member name="F:Azure.Monitor.OpenTelemetry.Exporter.AzureMonitorExporterOptions.ServiceVersion.V2020_09_15_Preview">
            <summary>
            (https://github.com/Azure/azure-rest-api-specs/blob/master/specification/applicationinsights/data-plane/Monitor.Exporters/preview/2020-09-15_Preview/swagger.json).
            </summary>
        </member>
        <member name="F:Azure.Monitor.OpenTelemetry.Exporter.AzureMonitorExporterOptions.ServiceVersion.v2_1">
            <summary>
            (https://github.com/Azure/azure-rest-api-specs/blob/master/specification/applicationinsights/data-plane/Monitor.Exporters/preview/v2.1/swagger.json).
            </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.AzureMonitorExporterOptions.StorageDirectory">
            <summary>
            Override the default directory for offline storage.
            </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.AzureMonitorExporterOptions.DisableOfflineStorage">
            <summary>
            Disable offline storage.
            </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.AzureMonitorExporterOptions.EnableStatsbeat">
            <summary>
            Internal flag to control if Statsbeat is enabled.
            </summary>
        </member>
        <member name="T:Azure.Monitor.OpenTelemetry.Exporter.AzureMonitorExporterTraceExtensions">
            <summary>
            Extension methods to simplify registering of Azure Monitor Trace Exporter.
            </summary>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.AzureMonitorExporterTraceExtensions.AddAzureMonitorTraceExporter(OpenTelemetry.Trace.TracerProviderBuilder,System.Action{Azure.Monitor.OpenTelemetry.Exporter.AzureMonitorExporterOptions},Azure.Core.TokenCredential,System.String)">
            <summary>
            Adds Azure Monitor Trace exporter to the TracerProvider.
            </summary>
            <param name="builder"><see cref="T:OpenTelemetry.Trace.TracerProviderBuilder" /> builder to use.</param>
            <param name="configure">Callback action for configuring <see cref="T:Azure.Monitor.OpenTelemetry.Exporter.AzureMonitorExporterOptions" />.</param>
            <param name="credential">
            An Azure <see cref="T:Azure.Core.TokenCredential" /> capable of providing an OAuth token.
            Note: if a credential is provided to both <see cref="T:Azure.Monitor.OpenTelemetry.Exporter.AzureMonitorExporterOptions" /> and this parameter,
            the Options will take precedence.
            </param>
            <param name="name">Name which is used when retrieving options.</param>
            <returns>The instance of <see cref="T:OpenTelemetry.Trace.TracerProviderBuilder" /> to chain the calls.</returns>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.AzureMonitorLogExporter.Export(OpenTelemetry.Batch{OpenTelemetry.Logs.LogRecord}@)">
            <summary>
            Exports a batch of telemetry objects.
            </summary><param name="batch">Batch of telemetry objects to export.</param><returns>Result of the export operation.</returns>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.AzureMonitorMetricExporter.Export(OpenTelemetry.Batch{OpenTelemetry.Metrics.Metric}@)">
            <summary>
            Exports a batch of telemetry objects.
            </summary><param name="batch">Batch of telemetry objects to export.</param><returns>Result of the export operation.</returns>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.AzureMonitorTraceExporter.Export(OpenTelemetry.Batch{System.Diagnostics.Activity}@)">
            <summary>
            Exports a batch of telemetry objects.
            </summary><param name="batch">Batch of telemetry objects to export.</param><returns>Result of the export operation.</returns>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.ApplicationInsightsRestClient.InternalTrackAsync(System.Collections.Generic.IEnumerable{Azure.Monitor.OpenTelemetry.Exporter.Models.TelemetryItem},System.Threading.CancellationToken)">
            <summary>
            This operation sends a sequence of telemetry events that will be monitored by Azure Monitor.
            </summary>
            <param name="body">The list of telemetry events to track.</param>
            <param name="cancellationToken">The cancellation token to use.</param>
            <returns></returns>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.ApplicationInsightsRestClient.InternalTrackAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            This operation sends a blob from persistent storage that will be monitored by Azure Monitor.
            </summary>
            <param name="body">Content of blob to track.</param>
            <param name="cancellationToken">The cancellation token to use.</param>
            <returns></returns>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.ApplicationInsightsRestClient.ClientDiagnostics">
            <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.ApplicationInsightsRestClient.#ctor(Azure.Core.Pipeline.ClientDiagnostics,Azure.Core.Pipeline.HttpPipeline,System.String)">
            <summary> Initializes a new instance of ApplicationInsightsRestClient. </summary>
            <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="host"> Breeze endpoint: https://dc.services.visualstudio.com. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="clientDiagnostics" />, <paramref name="pipeline" /> or <paramref name="host" /> is null. </exception>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.ApplicationInsightsRestClient.TrackAsync(System.Collections.Generic.IEnumerable{Azure.Monitor.OpenTelemetry.Exporter.Models.TelemetryItem},System.Threading.CancellationToken)">
            <summary> Track telemetry events. </summary>
            <param name="body"> The list of telemetry events to track. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="body" /> is null. </exception>
            <remarks> This operation sends a sequence of telemetry events that will be monitored by Azure Monitor. </remarks>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.ApplicationInsightsRestClient.Track(System.Collections.Generic.IEnumerable{Azure.Monitor.OpenTelemetry.Exporter.Models.TelemetryItem},System.Threading.CancellationToken)">
            <summary> Track telemetry events. </summary>
            <param name="body"> The list of telemetry events to track. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="body" /> is null. </exception>
            <remarks> This operation sends a sequence of telemetry events that will be monitored by Azure Monitor. </remarks>
        </member>
        <member name="T:Azure.Monitor.OpenTelemetry.Exporter.Models.MessageData">
            <summary> Instances of Message represent printf-like trace statements that are text-searched. Log4Net, NLog and other text-based log file entries are translated into instances of this type. The message does not have measurements. </summary>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Models.MessageData.#ctor(System.Int32,System.String)">
            <summary> Initializes a new instance of MessageData. </summary>
            <param name="version"> Schema version. </param>
            <param name="message"> Trace message. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="message" /> is null. </exception>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.MessageData.Message">
            <summary> Trace message. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.MessageData.SeverityLevel">
            <summary> Trace severity level. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.MessageData.Properties">
            <summary> Collection of custom properties. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.MessageData.Measurements">
            <summary> Collection of custom measurements. </summary>
        </member>
        <member name="T:Azure.Monitor.OpenTelemetry.Exporter.Models.MetricDataPoint">
            <summary> Metric data single measurement. </summary>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Models.MetricDataPoint.#ctor(System.String,System.Double)">
            <summary> Initializes a new instance of MetricDataPoint. </summary>
            <param name="name"> Name of the metric. </param>
            <param name="value"> Single value for measurement. Sum of individual measurements for the aggregation. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="name" /> is null. </exception>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.MetricDataPoint.Namespace">
            <summary> Namespace of the metric. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.MetricDataPoint.Name">
            <summary> Name of the metric. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.MetricDataPoint.DataPointType">
            <summary> Metric type. Single measurement or the aggregated value. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.MetricDataPoint.Value">
            <summary> Single value for measurement. Sum of individual measurements for the aggregation. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.MetricDataPoint.Count">
            <summary> Metric weight of the aggregated metric. Should not be set for a measurement. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.MetricDataPoint.Min">
            <summary> Minimum value of the aggregated metric. Should not be set for a measurement. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.MetricDataPoint.Max">
            <summary> Maximum value of the aggregated metric. Should not be set for a measurement. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.MetricDataPoint.StdDev">
            <summary> Standard deviation of the aggregated metric. Should not be set for a measurement. </summary>
        </member>
        <member name="T:Azure.Monitor.OpenTelemetry.Exporter.Models.MetricsData">
            <summary> An instance of the Metric item is a list of measurements (single data points) and/or aggregations. </summary>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Models.MetricsData.#ctor(System.Int32)">
            <summary>
            This constructor is used only for creating resource metrics with the name "_OTELRESOURCE_".
            </summary>
            <param name="version">Schema version.</param>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Models.MetricsData.#ctor(System.Int32,System.Collections.Generic.IEnumerable{Azure.Monitor.OpenTelemetry.Exporter.Models.MetricDataPoint})">
            <summary> Initializes a new instance of MetricsData. </summary>
            <param name="version"> Schema version. </param>
            <param name="metrics"> List of metrics. Only one metric in the list is currently supported by Application Insights storage. If multiple data points were sent only the first one will be used. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="metrics" /> is null. </exception>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.MetricsData.Metrics">
            <summary> List of metrics. Only one metric in the list is currently supported by Application Insights storage. If multiple data points were sent only the first one will be used. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.MetricsData.Properties">
            <summary> Collection of custom properties. </summary>
        </member>
        <member name="T:Azure.Monitor.OpenTelemetry.Exporter.Models.RemoteDependencyData">
            <summary> An instance of Remote Dependency represents an interaction of the monitored component with a remote component/service like SQL or an HTTP endpoint. </summary>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Models.RemoteDependencyData.#ctor(System.Int32,System.String,System.String)">
            <summary> Initializes a new instance of RemoteDependencyData. </summary>
            <param name="version"> Schema version. </param>
            <param name="name"> Name of the command initiated with this dependency call. Low cardinality value. Examples are stored procedure name and URL path template. </param>
            <param name="duration"> Request duration in format: DD.HH:MM:SS.MMMMMM. Must be less than 1000 days. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="name" /> or <paramref name="duration" /> is null. </exception>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.RemoteDependencyData.Id">
            <summary> Identifier of a dependency call instance. Used for correlation with the request telemetry item corresponding to this dependency call. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.RemoteDependencyData.Name">
            <summary> Name of the command initiated with this dependency call. Low cardinality value. Examples are stored procedure name and URL path template. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.RemoteDependencyData.ResultCode">
            <summary> Result code of a dependency call. Examples are SQL error code and HTTP status code. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.RemoteDependencyData.Data">
            <summary> Command initiated by this dependency call. Examples are SQL statement and HTTP URL with all query parameters. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.RemoteDependencyData.Type">
            <summary> Dependency type name. Very low cardinality value for logical grouping of dependencies and interpretation of other fields like commandName and resultCode. Examples are SQL, Azure table, and HTTP. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.RemoteDependencyData.Target">
            <summary> Target site of a dependency call. Examples are server name, host address. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.RemoteDependencyData.Duration">
            <summary> Request duration in format: DD.HH:MM:SS.MMMMMM. Must be less than 1000 days. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.RemoteDependencyData.Success">
            <summary> Indication of successful or unsuccessful call. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.RemoteDependencyData.Properties">
            <summary> Collection of custom properties. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.RemoteDependencyData.Measurements">
            <summary> Collection of custom measurements. </summary>
        </member>
        <member name="T:Azure.Monitor.OpenTelemetry.Exporter.Models.RequestData">
            <summary> An instance of Request represents completion of an external request to the application to do work and contains a summary of that request execution and the results. </summary>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Models.RequestData.#ctor(System.Int32,System.String,System.String,System.Boolean,System.String)">
            <summary> Initializes a new instance of RequestData. </summary>
            <param name="version"> Schema version. </param>
            <param name="id"> Identifier of a request call instance. Used for correlation between request and other telemetry items. </param>
            <param name="duration"> Request duration in format: DD.HH:MM:SS.MMMMMM. Must be less than 1000 days. </param>
            <param name="success"> Indication of successful or unsuccessful call. </param>
            <param name="responseCode"> Result of a request execution. HTTP status code for HTTP requests. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="id" />, <paramref name="duration" /> or <paramref name="responseCode" /> is null. </exception>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.RequestData.Id">
            <summary> Identifier of a request call instance. Used for correlation between request and other telemetry items. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.RequestData.Name">
            <summary> Name of the request. Represents code path taken to process request. Low cardinality value to allow better grouping of requests. For HTTP requests it represents the HTTP method and URL path template like 'GET /values/{id}'. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.RequestData.Duration">
            <summary> Request duration in format: DD.HH:MM:SS.MMMMMM. Must be less than 1000 days. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.RequestData.Success">
            <summary> Indication of successful or unsuccessful call. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.RequestData.ResponseCode">
            <summary> Result of a request execution. HTTP status code for HTTP requests. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.RequestData.Source">
            <summary> Source of the request. Examples are the instrumentation key of the caller or the ip address of the caller. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.RequestData.Url">
            <summary> Request URL with all query string parameters. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.RequestData.Properties">
            <summary> Collection of custom properties. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.RequestData.Measurements">
            <summary> Collection of custom measurements. </summary>
        </member>
        <member name="T:Azure.Monitor.OpenTelemetry.Exporter.Models.StackFrame">
            <summary> Stack frame information. </summary>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Models.StackFrame.#ctor(System.Diagnostics.StackFrame,System.Int32)">
            <summary>
            Converts a System.Diagnostics.StackFrame to a Azure.Monitor.OpenTelemetry.Exporter.Models.StackFrame.
            </summary>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Models.StackFrame.GetStackFrameLength">
            <summary>
            Gets the stack frame length for only the strings in the stack frame.
            </summary>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Models.StackFrame.#ctor(System.Int32,System.String)">
            <summary> Initializes a new instance of StackFrame. </summary>
            <param name="level"></param>
            <param name="method"> Method name. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="method" /> is null. </exception>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.StackFrame.Level">
            <summary> Gets the level. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.StackFrame.Method">
            <summary> Method name. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.StackFrame.Assembly">
            <summary> Name of the assembly (dll, jar, etc.) containing this function. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.StackFrame.FileName">
            <summary> File name or URL of the method implementation. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.StackFrame.Line">
            <summary> Line number of the code implementation. </summary>
        </member>
        <member name="T:Azure.Monitor.OpenTelemetry.Exporter.Models.TelemetryExceptionData">
            <summary> An instance of Exception represents a handled or unhandled exception that occurred during execution of the monitored application. </summary>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Models.TelemetryExceptionData.#ctor(System.Int32,System.Collections.Generic.IEnumerable{Azure.Monitor.OpenTelemetry.Exporter.Models.TelemetryExceptionDetails})">
            <summary> Initializes a new instance of TelemetryExceptionData. </summary>
            <param name="version"> Schema version. </param>
            <param name="exceptions"> Exception chain - list of inner exceptions. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="exceptions" /> is null. </exception>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.TelemetryExceptionData.Exceptions">
            <summary> Exception chain - list of inner exceptions. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.TelemetryExceptionData.SeverityLevel">
            <summary> Severity level. Mostly used to indicate exception severity level when it is reported by logging library. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.TelemetryExceptionData.ProblemId">
            <summary> Identifier of where the exception was thrown in code. Used for exceptions grouping. Typically a combination of exception type and a function from the call stack. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.TelemetryExceptionData.Properties">
            <summary> Collection of custom properties. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.TelemetryExceptionData.Measurements">
            <summary> Collection of custom measurements. </summary>
        </member>
        <member name="T:Azure.Monitor.OpenTelemetry.Exporter.Models.TelemetryExceptionDetails">
            <summary> Exception details of the exception in a chain. </summary>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Models.TelemetryExceptionDetails.#ctor(System.Exception,System.String,Azure.Monitor.OpenTelemetry.Exporter.Models.TelemetryExceptionDetails)">
            <summary>
            Creates a new instance of ExceptionDetails from a System.Exception and a parent ExceptionDetails.
            </summary>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Models.TelemetryExceptionDetails.#ctor(System.String)">
            <summary> Initializes a new instance of TelemetryExceptionDetails. </summary>
            <param name="message"> Exception message. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="message" /> is null. </exception>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.TelemetryExceptionDetails.Id">
            <summary> In case exception is nested (outer exception contains inner one), the id and outerId properties are used to represent the nesting. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.TelemetryExceptionDetails.OuterId">
            <summary> The value of outerId is a reference to an element in ExceptionDetails that represents the outer exception. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.TelemetryExceptionDetails.TypeName">
            <summary> Exception type name. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.TelemetryExceptionDetails.Message">
            <summary> Exception message. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.TelemetryExceptionDetails.HasFullStack">
            <summary> Indicates if full exception stack is provided in the exception. The stack may be trimmed, such as in the case of a StackOverflow exception. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.TelemetryExceptionDetails.Stack">
            <summary> Text describing the stack. Either stack or parsedStack should have a value. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.TelemetryExceptionDetails.ParsedStack">
            <summary> List of stack frames. Either stack or parsedStack should have a value. </summary>
        </member>
        <member name="T:Azure.Monitor.OpenTelemetry.Exporter.Models.TelemetryItem">
            <summary> System variables for a telemetry item. </summary>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Models.TelemetryItem.#ctor(System.String,System.DateTimeOffset)">
            <summary> Initializes a new instance of TelemetryItem. </summary>
            <param name="name"> Type name of telemetry data item. </param>
            <param name="time"> Event date time when telemetry item was created. This is the wall clock time on the client when the event was generated. There is no guarantee that the client's time is accurate. This field must be formatted in UTC ISO 8601 format, with a trailing 'Z' character, as described publicly on https://en.wikipedia.org/wiki/ISO_8601#UTC. Note: the number of decimal seconds digits provided are variable (and unspecified). Consumers should handle this, i.e. managed code consumers should not use format 'O' for parsing as it specifies a fixed length. Example: 2009-06-15T13:45:30.0000000Z. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="name" /> is null. </exception>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.TelemetryItem.Version">
            <summary> Envelope version. For internal use only. By assigning this the default, it will not be serialized within the payload unless changed to a value other than #1. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.TelemetryItem.Name">
            <summary> Type name of telemetry data item. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.TelemetryItem.Time">
            <summary> Event date time when telemetry item was created. This is the wall clock time on the client when the event was generated. There is no guarantee that the client's time is accurate. This field must be formatted in UTC ISO 8601 format, with a trailing 'Z' character, as described publicly on https://en.wikipedia.org/wiki/ISO_8601#UTC. Note: the number of decimal seconds digits provided are variable (and unspecified). Consumers should handle this, i.e. managed code consumers should not use format 'O' for parsing as it specifies a fixed length. Example: 2009-06-15T13:45:30.0000000Z. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.TelemetryItem.SampleRate">
            <summary> Sampling rate used in application. This telemetry item represents 100 / sampleRate actual telemetry items. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.TelemetryItem.Sequence">
            <summary> Sequence field used to track absolute order of uploaded events. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.TelemetryItem.InstrumentationKey">
            <summary> The instrumentation key of the Application Insights resource. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.TelemetryItem.Tags">
            <summary> Key/value collection of context properties. See ContextTagKeys for information on available properties. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.TelemetryItem.Data">
            <summary> Telemetry data item. </summary>
        </member>
        <member name="T:Azure.Monitor.OpenTelemetry.Exporter.Models.AvailabilityData">
            <summary> Instances of AvailabilityData represent the result of executing an availability test. </summary>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Models.AvailabilityData.#ctor(System.Int32,System.String,System.String,System.String,System.Boolean)">
            <summary> Initializes a new instance of AvailabilityData. </summary>
            <param name="version"> Schema version. </param>
            <param name="id"> Identifier of a test run. Use it to correlate steps of test run and telemetry generated by the service. </param>
            <param name="name"> Name of the test that these availability results represent. </param>
            <param name="duration"> Duration in format: DD.HH:MM:SS.MMMMMM. Must be less than 1000 days. </param>
            <param name="success"> Success flag. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="id" />, <paramref name="name" /> or <paramref name="duration" /> is null. </exception>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.AvailabilityData.Id">
            <summary> Identifier of a test run. Use it to correlate steps of test run and telemetry generated by the service. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.AvailabilityData.Name">
            <summary> Name of the test that these availability results represent. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.AvailabilityData.Duration">
            <summary> Duration in format: DD.HH:MM:SS.MMMMMM. Must be less than 1000 days. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.AvailabilityData.Success">
            <summary> Success flag. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.AvailabilityData.RunLocation">
            <summary> Name of the location where the test was run from. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.AvailabilityData.Message">
            <summary> Diagnostic message for the result. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.AvailabilityData.Properties">
            <summary> Collection of custom properties. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.AvailabilityData.Measurements">
            <summary> Collection of custom measurements. </summary>
        </member>
        <member name="T:Azure.Monitor.OpenTelemetry.Exporter.Models.ContextTagKeys">
            <summary> The context tag keys. </summary>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Models.ContextTagKeys.#ctor(System.String)">
            <summary> Initializes a new instance of <see cref="T:Azure.Monitor.OpenTelemetry.Exporter.Models.ContextTagKeys" />. </summary>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value" /> is null. </exception>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.ContextTagKeys.AiApplicationVer">
            <summary> ai.application.ver. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.ContextTagKeys.AiDeviceId">
            <summary> ai.device.id. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.ContextTagKeys.AiDeviceLocale">
            <summary> ai.device.locale. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.ContextTagKeys.AiDeviceModel">
            <summary> ai.device.model. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.ContextTagKeys.AiDeviceOemName">
            <summary> ai.device.oemName. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.ContextTagKeys.AiDeviceOsVersion">
            <summary> ai.device.osVersion. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.ContextTagKeys.AiDeviceType">
            <summary> ai.device.type. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.ContextTagKeys.AiLocationIp">
            <summary> ai.location.ip. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.ContextTagKeys.AiLocationCountry">
            <summary> ai.location.country. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.ContextTagKeys.AiLocationProvince">
            <summary> ai.location.province. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.ContextTagKeys.AiLocationCity">
            <summary> ai.location.city. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.ContextTagKeys.AiOperationId">
            <summary> ai.operation.id. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.ContextTagKeys.AiOperationName">
            <summary> ai.operation.name. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.ContextTagKeys.AiOperationParentId">
            <summary> ai.operation.parentId. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.ContextTagKeys.AiOperationSyntheticSource">
            <summary> ai.operation.syntheticSource. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.ContextTagKeys.AiOperationCorrelationVector">
            <summary> ai.operation.correlationVector. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.ContextTagKeys.AiSessionId">
            <summary> ai.session.id. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.ContextTagKeys.AiSessionIsFirst">
            <summary> ai.session.isFirst. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.ContextTagKeys.AiUserAccountId">
            <summary> ai.user.accountId. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.ContextTagKeys.AiUserId">
            <summary> ai.user.id. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.ContextTagKeys.AiUserAuthUserId">
            <summary> ai.user.authUserId. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.ContextTagKeys.AiCloudRole">
            <summary> ai.cloud.role. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.ContextTagKeys.AiCloudRoleVer">
            <summary> ai.cloud.roleVer. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.ContextTagKeys.AiCloudRoleInstance">
            <summary> ai.cloud.roleInstance. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.ContextTagKeys.AiCloudLocation">
            <summary> ai.cloud.location. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.ContextTagKeys.AiInternalSdkVersion">
            <summary> ai.internal.sdkVersion. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.ContextTagKeys.AiInternalAgentVersion">
            <summary> ai.internal.agentVersion. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.ContextTagKeys.AiInternalNodeName">
            <summary> ai.internal.nodeName. </summary>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Models.ContextTagKeys.op_Equality(Azure.Monitor.OpenTelemetry.Exporter.Models.ContextTagKeys,Azure.Monitor.OpenTelemetry.Exporter.Models.ContextTagKeys)">
            <summary> Determines if two <see cref="T:Azure.Monitor.OpenTelemetry.Exporter.Models.ContextTagKeys" /> values are the same. </summary>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Models.ContextTagKeys.op_Inequality(Azure.Monitor.OpenTelemetry.Exporter.Models.ContextTagKeys,Azure.Monitor.OpenTelemetry.Exporter.Models.ContextTagKeys)">
            <summary> Determines if two <see cref="T:Azure.Monitor.OpenTelemetry.Exporter.Models.ContextTagKeys" /> values are not the same. </summary>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Models.ContextTagKeys.op_Implicit(System.String)~Azure.Monitor.OpenTelemetry.Exporter.Models.ContextTagKeys">
            <summary> Converts a string to a <see cref="T:Azure.Monitor.OpenTelemetry.Exporter.Models.ContextTagKeys" />. </summary>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Models.ContextTagKeys.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary><param name="obj">The object to compare with the current instance.</param><returns><see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Models.ContextTagKeys.Equals(Azure.Monitor.OpenTelemetry.Exporter.Models.ContextTagKeys)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary><param name="other">An object to compare with this object.</param><returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Models.ContextTagKeys.GetHashCode">
            <summary>Returns the hash code for this instance.</summary><returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Models.ContextTagKeys.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary><returns>The fully qualified type name.</returns>
        </member>
        <member name="T:Azure.Monitor.OpenTelemetry.Exporter.Models.DataPointType">
            <summary> Type of the metric data measurement. </summary>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Models.DataPointType.#ctor(System.String)">
            <summary> Initializes a new instance of <see cref="T:Azure.Monitor.OpenTelemetry.Exporter.Models.DataPointType" />. </summary>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value" /> is null. </exception>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.DataPointType.Measurement">
            <summary> Measurement. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.DataPointType.Aggregation">
            <summary> Aggregation. </summary>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Models.DataPointType.op_Equality(Azure.Monitor.OpenTelemetry.Exporter.Models.DataPointType,Azure.Monitor.OpenTelemetry.Exporter.Models.DataPointType)">
            <summary> Determines if two <see cref="T:Azure.Monitor.OpenTelemetry.Exporter.Models.DataPointType" /> values are the same. </summary>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Models.DataPointType.op_Inequality(Azure.Monitor.OpenTelemetry.Exporter.Models.DataPointType,Azure.Monitor.OpenTelemetry.Exporter.Models.DataPointType)">
            <summary> Determines if two <see cref="T:Azure.Monitor.OpenTelemetry.Exporter.Models.DataPointType" /> values are not the same. </summary>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Models.DataPointType.op_Implicit(System.String)~Azure.Monitor.OpenTelemetry.Exporter.Models.DataPointType">
            <summary> Converts a string to a <see cref="T:Azure.Monitor.OpenTelemetry.Exporter.Models.DataPointType" />. </summary>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Models.DataPointType.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary><param name="obj">The object to compare with the current instance.</param><returns><see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Models.DataPointType.Equals(Azure.Monitor.OpenTelemetry.Exporter.Models.DataPointType)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary><param name="other">An object to compare with this object.</param><returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Models.DataPointType.GetHashCode">
            <summary>Returns the hash code for this instance.</summary><returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Models.DataPointType.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary><returns>The fully qualified type name.</returns>
        </member>
        <member name="T:Azure.Monitor.OpenTelemetry.Exporter.Models.MonitorBase">
            <summary> Data struct to contain only C section with custom fields. </summary>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Models.MonitorBase.#ctor">
            <summary> Initializes a new instance of MonitorBase. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.MonitorBase.BaseType">
            <summary> Name of item (B section) if any. If telemetry data is derived straight from this, this should be null. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.MonitorBase.BaseData">
            <summary> The data payload for the telemetry request. </summary>
        </member>
        <member name="T:Azure.Monitor.OpenTelemetry.Exporter.Models.MonitorDomain">
            <summary> The abstract common base of all domains. </summary>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Models.MonitorDomain.#ctor(System.Int32)">
            <summary> Initializes a new instance of MonitorDomain. </summary>
            <param name="version"> Schema version. </param>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.MonitorDomain.Version">
            <summary> Schema version. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.MonitorDomain.AdditionalProperties">
            <summary> Additional Properties. </summary>
        </member>
        <member name="T:Azure.Monitor.OpenTelemetry.Exporter.Models.PageViewData">
            <summary> An instance of PageView represents a generic action on a page like a button click. It is also the base type for PageView. </summary>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Models.PageViewData.#ctor(System.Int32,System.String,System.String)">
            <summary> Initializes a new instance of PageViewData. </summary>
            <param name="version"> Schema version. </param>
            <param name="id"> Identifier of a page view instance. Used for correlation between page view and other telemetry items. </param>
            <param name="name"> Event name. Keep it low cardinality to allow proper grouping and useful metrics. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="id" /> or <paramref name="name" /> is null. </exception>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.PageViewData.Id">
            <summary> Identifier of a page view instance. Used for correlation between page view and other telemetry items. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.PageViewData.Name">
            <summary> Event name. Keep it low cardinality to allow proper grouping and useful metrics. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.PageViewData.Url">
            <summary> Request URL with all query string parameters. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.PageViewData.Duration">
            <summary> Request duration in format: DD.HH:MM:SS.MMMMMM. For a page view (PageViewData), this is the duration. For a page view with performance information (PageViewPerfData), this is the page load time. Must be less than 1000 days. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.PageViewData.ReferredUri">
            <summary> Fully qualified page URI or URL of the referring page; if unknown, leave blank. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.PageViewData.Properties">
            <summary> Collection of custom properties. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.PageViewData.Measurements">
            <summary> Collection of custom measurements. </summary>
        </member>
        <member name="T:Azure.Monitor.OpenTelemetry.Exporter.Models.PageViewPerfData">
            <summary> An instance of PageViewPerf represents: a page view with no performance data, a page view with performance data, or just the performance data of an earlier page request. </summary>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Models.PageViewPerfData.#ctor(System.Int32,System.String,System.String)">
            <summary> Initializes a new instance of PageViewPerfData. </summary>
            <param name="version"> Schema version. </param>
            <param name="id"> Identifier of a page view instance. Used for correlation between page view and other telemetry items. </param>
            <param name="name"> Event name. Keep it low cardinality to allow proper grouping and useful metrics. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="id" /> or <paramref name="name" /> is null. </exception>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.PageViewPerfData.Id">
            <summary> Identifier of a page view instance. Used for correlation between page view and other telemetry items. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.PageViewPerfData.Name">
            <summary> Event name. Keep it low cardinality to allow proper grouping and useful metrics. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.PageViewPerfData.Url">
            <summary> Request URL with all query string parameters. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.PageViewPerfData.Duration">
            <summary> Request duration in format: DD.HH:MM:SS.MMMMMM. For a page view (PageViewData), this is the duration. For a page view with performance information (PageViewPerfData), this is the page load time. Must be less than 1000 days. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.PageViewPerfData.PerfTotal">
            <summary> Performance total in TimeSpan 'G' (general long) format: d:hh:mm:ss.fffffff. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.PageViewPerfData.NetworkConnect">
            <summary> Network connection time in TimeSpan 'G' (general long) format: d:hh:mm:ss.fffffff. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.PageViewPerfData.SentRequest">
            <summary> Sent request time in TimeSpan 'G' (general long) format: d:hh:mm:ss.fffffff. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.PageViewPerfData.ReceivedResponse">
            <summary> Received response time in TimeSpan 'G' (general long) format: d:hh:mm:ss.fffffff. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.PageViewPerfData.DomProcessing">
            <summary> DOM processing time in TimeSpan 'G' (general long) format: d:hh:mm:ss.fffffff. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.PageViewPerfData.Properties">
            <summary> Collection of custom properties. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.PageViewPerfData.Measurements">
            <summary> Collection of custom measurements. </summary>
        </member>
        <member name="T:Azure.Monitor.OpenTelemetry.Exporter.Models.SeverityLevel">
            <summary> Defines the level of severity for the event. </summary>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Models.SeverityLevel.#ctor(System.String)">
            <summary> Initializes a new instance of <see cref="T:Azure.Monitor.OpenTelemetry.Exporter.Models.SeverityLevel" />. </summary>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value" /> is null. </exception>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.SeverityLevel.Verbose">
            <summary> Verbose. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.SeverityLevel.Information">
            <summary> Information. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.SeverityLevel.Warning">
            <summary> Warning. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.SeverityLevel.Error">
            <summary> Error. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.SeverityLevel.Critical">
            <summary> Critical. </summary>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Models.SeverityLevel.op_Equality(Azure.Monitor.OpenTelemetry.Exporter.Models.SeverityLevel,Azure.Monitor.OpenTelemetry.Exporter.Models.SeverityLevel)">
            <summary> Determines if two <see cref="T:Azure.Monitor.OpenTelemetry.Exporter.Models.SeverityLevel" /> values are the same. </summary>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Models.SeverityLevel.op_Inequality(Azure.Monitor.OpenTelemetry.Exporter.Models.SeverityLevel,Azure.Monitor.OpenTelemetry.Exporter.Models.SeverityLevel)">
            <summary> Determines if two <see cref="T:Azure.Monitor.OpenTelemetry.Exporter.Models.SeverityLevel" /> values are not the same. </summary>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Models.SeverityLevel.op_Implicit(System.String)~Azure.Monitor.OpenTelemetry.Exporter.Models.SeverityLevel">
            <summary> Converts a string to a <see cref="T:Azure.Monitor.OpenTelemetry.Exporter.Models.SeverityLevel" />. </summary>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Models.SeverityLevel.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary><param name="obj">The object to compare with the current instance.</param><returns><see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Models.SeverityLevel.Equals(Azure.Monitor.OpenTelemetry.Exporter.Models.SeverityLevel)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary><param name="other">An object to compare with this object.</param><returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Models.SeverityLevel.GetHashCode">
            <summary>Returns the hash code for this instance.</summary><returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Models.SeverityLevel.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary><returns>The fully qualified type name.</returns>
        </member>
        <member name="T:Azure.Monitor.OpenTelemetry.Exporter.Models.TelemetryErrorDetails">
            <summary> The error details. </summary>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Models.TelemetryErrorDetails.#ctor">
            <summary> Initializes a new instance of TelemetryErrorDetails. </summary>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Models.TelemetryErrorDetails.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary> Initializes a new instance of TelemetryErrorDetails. </summary>
            <param name="index"> The index in the original payload of the item. </param>
            <param name="statusCode"> The item specific [HTTP Response status code](#Response Status Codes). </param>
            <param name="message"> The error message. </param>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.TelemetryErrorDetails.Index">
            <summary> The index in the original payload of the item. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.TelemetryErrorDetails.StatusCode">
            <summary> The item specific [HTTP Response status code](#Response Status Codes). </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.TelemetryErrorDetails.Message">
            <summary> The error message. </summary>
        </member>
        <member name="T:Azure.Monitor.OpenTelemetry.Exporter.Models.TelemetryEventData">
            <summary> Instances of Event represent structured event records that can be grouped and searched by their properties. Event data item also creates a metric of event count by name. </summary>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Models.TelemetryEventData.#ctor(System.Int32,System.String)">
            <summary> Initializes a new instance of TelemetryEventData. </summary>
            <param name="version"> Schema version. </param>
            <param name="name"> Event name. Keep it low cardinality to allow proper grouping and useful metrics. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="name" /> is null. </exception>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.TelemetryEventData.Name">
            <summary> Event name. Keep it low cardinality to allow proper grouping and useful metrics. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.TelemetryEventData.Properties">
            <summary> Collection of custom properties. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.TelemetryEventData.Measurements">
            <summary> Collection of custom measurements. </summary>
        </member>
        <member name="T:Azure.Monitor.OpenTelemetry.Exporter.Models.TrackResponse">
            <summary> Response containing the status of each telemetry item. </summary>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Models.TrackResponse.#ctor">
            <summary> Initializes a new instance of TrackResponse. </summary>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Models.TrackResponse.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IReadOnlyList{Azure.Monitor.OpenTelemetry.Exporter.Models.TelemetryErrorDetails})">
            <summary> Initializes a new instance of TrackResponse. </summary>
            <param name="itemsReceived"> The number of items received. </param>
            <param name="itemsAccepted"> The number of items accepted. </param>
            <param name="errors"> An array of error detail objects. </param>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.TrackResponse.ItemsReceived">
            <summary> The number of items received. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.TrackResponse.ItemsAccepted">
            <summary> The number of items accepted. </summary>
        </member>
        <member name="P:Azure.Monitor.OpenTelemetry.Exporter.Models.TrackResponse.Errors">
            <summary> An array of error detail objects. </summary>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Internals.ArrayExtensions.ToCommaDelimitedString(System.Array)">
            <summary>
            Builds a comma delimited string of the components of an array.
            </summary>
            <remarks>
            For example: new int[] { 1, 2, 3 } would be returned as "1,2,3".
            </remarks>
            <param name="input">An array to be evaluated.</param>
            <returns>A comma delimited string of the components of the input array.</returns>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Internals.AzMonListExtensions.GetRequestUrl(Azure.Monitor.OpenTelemetry.Exporter.Internals.AzMonList)">
            <summary>
             Gets http request url from activity tag objects.
            </summary>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Internals.AzMonListExtensions.GetDependencyUrl(Azure.Monitor.OpenTelemetry.Exporter.Internals.AzMonList)">
            <summary>
             Gets http dependency url from activity tag objects.
            </summary>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Internals.AzMonListExtensions.GetHttpDependencyTarget(Azure.Monitor.OpenTelemetry.Exporter.Internals.AzMonList)">
            <summary>
             Gets Http dependency target from activity tag objects.
            </summary>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Internals.AzMonListExtensions.GetDbDependencyTargetAndName(Azure.Monitor.OpenTelemetry.Exporter.Internals.AzMonList)">
            <summary>
             Gets Database dependency target and name from activity tag objects.
            </summary>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Internals.AzMonListExtensions.GetDependencyTarget(Azure.Monitor.OpenTelemetry.Exporter.Internals.AzMonList,Azure.Monitor.OpenTelemetry.Exporter.Internals.OperationType)">
            <summary>
             Gets dependency target from activity tag objects.
            </summary>
        </member>
        <member name="T:Azure.Monitor.OpenTelemetry.Exporter.Internals.AzureMonitorTransmitter">
            <summary>
            This class encapsulates transmitting a collection of <see cref="T:Azure.Monitor.OpenTelemetry.Exporter.Models.TelemetryItem" /> to the configured Ingestion Endpoint.
            </summary>
        </member>
        <member name="F:Azure.Monitor.OpenTelemetry.Exporter.Internals.ConnectionString.AadHelper.DefaultAadScope">
            <summary>
            Default AAD Scope for Ingestion.
            IMPORTANT: This value only works in the Public Azure Cloud.
            For Sovereign Azure Clouds, this value MUST be built from the Connection String.
            </summary>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Internals.ConnectionString.AadHelper.GetScope(System.String)">
            <summary>
            Get the Scope value required for AAD authentication.
            </summary>
            <remarks>
            The AUDIENCE is a url that identifies Azure Monitor in a specific cloud (For example: "https://monitor.azure.com/").
            The SCOPE is the audience + the permission (For example: "https://monitor.azure.com//.default").
            </remarks>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Internals.ConnectionString.ConnectionStringParser.GetValues(System.String)">
            <summary>
            Parse a connection string that matches the format: "key1=value1;key2=value2;key3=value3".
            This method will encapsulate all exception handling.
            </summary>
            <remarks>
            Official Doc: <a href="https://docs.microsoft.com/azure/azure-monitor/app/sdk-connection-string" />.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Any exceptions that occur while parsing the connection string will be wrapped and re-thrown.
            </exception>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Internals.ConnectionString.ConnectionStringParser.GetIngestionEndpoint(Azure.Core.ConnectionString)">
            <summary>
            Evaluate connection string and return the requested endpoint.
            </summary>
            <remarks>
            Parsing the connection string MUST follow these rules:
                1. check for explicit endpoint (location is ignored)
                2. check for endpoint suffix (location is optional)
                3. use default endpoint (location is ignored)
            This behavior is required by the Connection String Specification.
            </remarks>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Internals.ConnectionString.ConnectionStringParser.TryBuildUri(System.String,System.String,System.Uri@,System.String)">
            <summary>
            Construct a Uri from the possible parts.
            Format: "location.prefix.suffix".
            Example: "https://westus2.dc.applicationinsights.azure.cn/".
            </summary>
            <remarks>
            Will also attempt to sanitize user input. Won't fail if the user typo-ed an extra period.
            </remarks>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Internals.ConnectionString.ConnectionStringParser.TryGetNonRequiredValue(Azure.Core.ConnectionString,System.String,System.String@)">
            <summary>
            This method wraps <see cref="M:Azure.Core.ConnectionString.GetNonRequired(System.String)" /> in a null check.
            </summary>
        </member>
        <member name="T:Azure.Monitor.OpenTelemetry.Exporter.Internals.ConnectionString.ConnectionVars">
            <summary>
            Encapsulates variables from the ConnectionString.
            </summary>
        </member>
        <member name="F:Azure.Monitor.OpenTelemetry.Exporter.Internals.ConnectionString.Constants.DefaultIngestionEndpoint">
            <summary>
            Default endpoint for Ingestion (aka Breeze).
            </summary>
        </member>
        <member name="F:Azure.Monitor.OpenTelemetry.Exporter.Internals.ConnectionString.Constants.IngestionPrefix">
            <summary>
            Sub-domain for Ingestion endpoint (aka Breeze). (https://dc.applicationinsights.azure.com/).
            </summary>
        </member>
        <member name="F:Azure.Monitor.OpenTelemetry.Exporter.Internals.ConnectionString.Constants.IngestionExplicitEndpointKey">
            <summary>
            This is the key that a customer would use to specify an explicit endpoint in the connection string.
            </summary>
        </member>
        <member name="F:Azure.Monitor.OpenTelemetry.Exporter.Internals.ConnectionString.Constants.InstrumentationKeyKey">
            <summary>
            This is the key that a customer would use to specify an instrumentation key in the connection string.
            </summary>
        </member>
        <member name="F:Azure.Monitor.OpenTelemetry.Exporter.Internals.ConnectionString.Constants.EndpointSuffixKey">
            <summary>
            This is the key that a customer would use to specify an endpoint suffix in the connection string.
            </summary>
        </member>
        <member name="F:Azure.Monitor.OpenTelemetry.Exporter.Internals.ConnectionString.Constants.LocationKey">
            <summary>
            This is the key that a customer would use to specify a location in the connection string.
            </summary>
        </member>
        <member name="F:Azure.Monitor.OpenTelemetry.Exporter.Internals.ConnectionString.Constants.AADAudienceKey">
            <summary>
            This is the key that a customer would use to specify an AAD Audience in the connection string.
            </summary>
        </member>
        <member name="F:Azure.Monitor.OpenTelemetry.Exporter.Internals.ConnectionString.Constants.ConnectionStringMaxLength">
            <summary>
            Maximum allowed length for connection string.
            </summary>
            <remarks>
            Currently 9 accepted keywords (~200 characters).
            Assuming 200 characters per value (~1800 characters).
            Total theoretical max length = (1800 + 200) = 2000.
            Setting an over-exaggerated max length to protect against malicious injections (2^12 = 4096).
            </remarks>
        </member>
        <member name="T:Azure.Monitor.OpenTelemetry.Exporter.Internals.InnerExceptionCountExceededException">
            <summary>
            This exception is used to notify the user that the set of inner exceptions has been trimmed because it exceeded our allowed send limit.
            </summary>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Internals.InnerExceptionCountExceededException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Monitor.OpenTelemetry.Exporter.Internals.InnerExceptionCountExceededException" /> class.
            </summary>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Internals.InnerExceptionCountExceededException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Monitor.OpenTelemetry.Exporter.Internals.InnerExceptionCountExceededException" /> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error. </param>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Internals.InnerExceptionCountExceededException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Monitor.OpenTelemetry.Exporter.Internals.InnerExceptionCountExceededException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception. </param><param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Internals.InnerExceptionCountExceededException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Monitor.OpenTelemetry.Exporter.Internals.InnerExceptionCountExceededException" /> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination. </param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Internals.ITransmitter.TrackAsync(System.Collections.Generic.IEnumerable{Azure.Monitor.OpenTelemetry.Exporter.Models.TelemetryItem},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Sent telemetry and return the number of items Accepted.
            </summary>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Internals.LogsHelper.GetSeverityLevel(Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            Converts the <see cref="P:OpenTelemetry.Logs.LogRecord.LogLevel" /> into corresponding Azure Monitor <see cref="T:Azure.Monitor.OpenTelemetry.Exporter.Models.SeverityLevel" />.
            </summary>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Internals.Platform.IPlatform.GetEnvironmentVariable(System.String)">
            <summary>
            Returns null if the key is not found.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Azure.Monitor.OpenTelemetry.Exporter.Internals.SchemaConstants">
            <summary>
            This class encapsulates constant values from the Azure Monitor Swagger
            <see href="https://github.com/Azure/azure-rest-api-specs/blob/4eb2ae1846ac79a993cabc378436b6218baaa1ed/specification/applicationinsights/data-plane/Monitor.Exporters/preview/2020-09-15_Preview/swagger.json" />
            and the Ingestion service data models
            <see href="https://docs.microsoft.com/azure/azure-monitor/app/data-model" />.
            </summary>
            <remarks>
            MaxLength (inclusive) defines the maximum number of characters.
            LessThanDays (exclusive) defines the upper limit of days.
            MaxFrames (inclusive) defines the maximum number of frames.
            </remarks>
        </member>
        <member name="F:Azure.Monitor.OpenTelemetry.Exporter.Internals.SchemaConstants.KVP_MaxKeyLength">
            <remarks>
            If a Key exceeds maximum allowable length limit, then that particular Key-Value pair should be dropped.
            </remarks>
        </member>
        <member name="F:Azure.Monitor.OpenTelemetry.Exporter.Internals.SchemaConstants.Duration_MaxValue">
            <remarks>
            Represents 1 tick (1 ten-millionth of a second) less than 1000 days.
            </remarks>
        </member>
        <member name="T:Azure.Monitor.OpenTelemetry.Exporter.Internals.SemanticConventions">
            <summary>
            Constants for semantic attribute names outlined by the OpenTelemetry specifications.
            <see href="https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/README.md" />.
            </summary>
        </member>
        <member name="F:Azure.Monitor.OpenTelemetry.Exporter.Internals.Statsbeat.StatsbeatConstants.AMS_Url">
            <summary>
            <see href="https://learn.microsoft.com/azure/virtual-machines/instance-metadata-service" />.
            </summary>
        </member>
        <member name="F:Azure.Monitor.OpenTelemetry.Exporter.Internals.Statsbeat.StatsbeatConstants.AttachStatsbeatInterval">
            <summary>
            24 hrs == 86400000 milliseconds.
            </summary>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Internals.StringExtensions.Truncate(System.String,System.Int32)">
            <summary>
            This method will truncate a string if that string exceeds a specified max length.
            </summary>
            <remarks>
            This method is a wrapper around <see cref="M:System.String.Substring(System.Int32,System.Int32)" />.
            </remarks>
            <param name="input">A string to be evaluated.</param>
            <param name="maxLength">A specified length which is used to evaluate the input string.</param>
            <returns>The input string if less than max length, or a substring that begins at 0.</returns>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Internals.TraceHelper.AddActivityLinksToProperties(System.Diagnostics.Activity,Azure.Monitor.OpenTelemetry.Exporter.Internals.AzMonList@)">
            <summary>
            Converts Activity Links to custom property with key as _MS.links.
            Value will be a JSON string formatted as [{"operation_Id":"{TraceId}","id":"{SpanId}"}].
            </summary>
        </member>
        <member name="F:Azure.Monitor.OpenTelemetry.Exporter.Internals.TransmissionState.Open">
            <summary>
            Represents disabled transmission.
            </summary>
        </member>
        <member name="F:Azure.Monitor.OpenTelemetry.Exporter.Internals.TransmissionState.Closed">
            <summary>
            Represents enabled transmission.
            </summary>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Internals.TransmissionStateManager.#ctor(System.Random,System.TimeSpan,System.DateTimeOffset,System.Timers.Timer,Azure.Monitor.OpenTelemetry.Exporter.Internals.TransmissionState)">
            <summary>
            For test purposes.
            </summary>
            <param name="random"></param>
            <param name="minIntervalToUpdateConsecutiveErrors"></param>
            <param name="nextMinTimeToUpdateConsecutiveErrors"></param>
            <param name="backOffIntervalTimer"></param>
            <param name="state"></param>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Internals.TransmissionStateManager.CloseTransmission">
            <summary>
            Enable transmitting data to backend.
            To be called for each successful request or after back-off interval expiration.
            </summary>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Internals.TransmissionStateManager.ResetConsecutiveErrors">
            <summary>
            Resets consecutive error count.
            To be called for each successful request.
            </summary>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Internals.TransmissionStateManager.GetBackOffTimeInterval">
            <summary>
            Calculates the time interval for which the transmission should be halted.
            Number of consecutive errors are taken in to account to increase the time.
            Random variation is introduced in order to avoid collision.
            </summary>
            <returns>BackOff time interval.</returns>
        </member>
        <member name="T:Azure.Monitor.OpenTelemetry.Exporter.Internals.TransmitterFactory">
            <summary>
            This Factory encapsulates the <see cref="T:Azure.Monitor.OpenTelemetry.Exporter.Internals.AzureMonitorTransmitter" />.
            An ideal users will create a single exporter for each signal (Logs, Metrics, Traces).
            This factory should ensure that only one instance of the Transmitter is created for
            any unique connection string.
            </summary>
        </member>
        <member name="T:Azure.Core.ArrayBufferWriter`1">
            <summary>
            Represents a heap-based, array-backed output sink into which <typeparam name="T" /> data can be written.
            </summary>
        </member>
        <member name="M:Azure.Core.ArrayBufferWriter`1.#ctor">
            <summary>
            Creates an instance of an <see cref="T:Azure.Core.ArrayBufferWriter`1" />, in which data can be written to,
            with the default initial capacity.
            </summary>
        </member>
        <member name="M:Azure.Core.ArrayBufferWriter`1.#ctor(System.Int32)">
            <summary>
            Creates an instance of an <see cref="T:Azure.Core.ArrayBufferWriter`1" />, in which data can be written to,
            with an initial capacity specified.
            </summary>
            <param name="initialCapacity">The minimum capacity with which to initialize the underlying buffer.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="initialCapacity" /> is not positive (i.e. less than or equal to 0).
            </exception>
        </member>
        <member name="P:Azure.Core.ArrayBufferWriter`1.WrittenMemory">
            <summary>
            Returns the data written to the underlying buffer so far, as a <see cref="T:System.ReadOnlyMemory`1" />.
            </summary>
        </member>
        <member name="P:Azure.Core.ArrayBufferWriter`1.WrittenSpan">
            <summary>
            Returns the data written to the underlying buffer so far, as a <see cref="T:System.ReadOnlySpan`1" />.
            </summary>
        </member>
        <member name="P:Azure.Core.ArrayBufferWriter`1.WrittenCount">
            <summary>
            Returns the amount of data written to the underlying buffer so far.
            </summary>
        </member>
        <member name="P:Azure.Core.ArrayBufferWriter`1.Capacity">
            <summary>
            Returns the total amount of space within the underlying buffer.
            </summary>
        </member>
        <member name="P:Azure.Core.ArrayBufferWriter`1.FreeCapacity">
            <summary>
            Returns the amount of space available that can still be written into without forcing the underlying buffer to grow.
            </summary>
        </member>
        <member name="M:Azure.Core.ArrayBufferWriter`1.Clear">
            <summary>
            Clears the data written to the underlying buffer.
            </summary>
            <remarks>
            You must clear the <see cref="T:Azure.Core.ArrayBufferWriter`1" /> before trying to re-use it.
            </remarks>
        </member>
        <member name="M:Azure.Core.ArrayBufferWriter`1.Advance(System.Int32)">
            <summary>
            Notifies <see cref="T:System.Buffers.IBufferWriter`1" /> that <paramref name="count" /> amount of data was written to the output <see cref="T:System.Span`1" />/<see cref="T:System.Memory`1" />.
            </summary>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="count" /> is negative.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when attempting to advance past the end of the underlying buffer.
            </exception>
            <remarks>
            You must request a new buffer after calling Advance to continue writing more data and cannot write to a previously acquired buffer.
            </remarks>
        </member>
        <member name="M:Azure.Core.ArrayBufferWriter`1.GetMemory(System.Int32)">
            <summary>
            Returns a <see cref="T:System.Memory`1" /> to write to that is at least the requested length (specified by <paramref name="sizeHint" />).
            If no <paramref name="sizeHint" /> is provided (or it's equal to <code>0</code>), some non-empty buffer is returned.
            </summary>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="sizeHint" /> is negative.
            </exception>
            <remarks>
            This will never return an empty <see cref="T:System.Memory`1" />.
            </remarks>
            <remarks>
            There is no guarantee that successive calls will return the same buffer or the same-sized buffer.
            </remarks>
            <remarks>
            You must request a new buffer after calling Advance to continue writing more data and cannot write to a previously acquired buffer.
            </remarks>
        </member>
        <member name="M:Azure.Core.ArrayBufferWriter`1.GetSpan(System.Int32)">
            <summary>
            Returns a <see cref="T:System.Span`1" /> to write to that is at least the requested length (specified by <paramref name="sizeHint" />).
            If no <paramref name="sizeHint" /> is provided (or it's equal to <code>0</code>), some non-empty buffer is returned.
            </summary>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="sizeHint" /> is negative.
            </exception>
            <remarks>
            This will never return an empty <see cref="T:System.Span`1" />.
            </remarks>
            <remarks>
            There is no guarantee that successive calls will return the same buffer or the same-sized buffer.
            </remarks>
            <remarks>
            You must request a new buffer after calling Advance to continue writing more data and cannot write to a previously acquired buffer.
            </remarks>
        </member>
        <member name="P:Azure.Core.CodeGenMemberSerializationHooksAttribute.SerializationValueHook">
            <summary>
            Gets or sets the method name to use when serializing the property value (property name excluded)
            The signature of the serialization hook method must be or compatible with when invoking:
            private void SerializeHook(Utf8JsonWriter writer);
            </summary>
        </member>
        <member name="P:Azure.Core.CodeGenMemberSerializationHooksAttribute.DeserializationValueHook">
            <summary>
            Gets or sets the method name to use when deserializing the property value from the JSON
            private static void DeserializationHook(JsonProperty property, ref TypeOfTheProperty propertyValue); // if the property is required
            private static void DeserializationHook(JsonProperty property, ref Optional&lt;TypeOfTheProperty&gt; propertyValue); // if the property is optional
            </summary>
        </member>
        <member name="P:Azure.Core.CodeGenModelAttribute.Usage">
            <summary>
            Gets or sets a coma separated list of additional model usage modes. Allowed values: model, error, intput, output.
            </summary>
        </member>
        <member name="P:Azure.Core.CodeGenModelAttribute.Formats">
            <summary>
            Gets or sets a coma separated list of additional model serialization formats.
            </summary>
        </member>
        <member name="P:Azure.Core.ProtocolOperation`1.Id">
            <summary>
            Gets an ID representing the operation that can be used to poll for
            the status of the long-running operation.
            </summary>
        </member>
        <member name="P:Azure.Core.ProtocolOperation`1.Value">
            <summary>
            Final result of the long-running operation.
            </summary><remarks>
            This property can be accessed only after the operation completes successfully (HasValue is true).
            </remarks>
        </member>
        <member name="P:Azure.Core.ProtocolOperation`1.HasCompleted">
            <summary>
            Returns true if the long-running operation completed.
            </summary>
        </member>
        <member name="P:Azure.Core.ProtocolOperation`1.HasValue">
            <summary>
            Returns true if the long-running operation completed successfully and has produced final result (accessible by Value property).
            </summary>
        </member>
        <member name="M:Azure.Core.ProtocolOperation`1.GetRawResponse">
            <summary>
            The last HTTP response received from the server.
            </summary><remarks>
            The last response returned from the server during the lifecycle of this instance.
            An instance of <see cref="T:Azure.Operation`1" /> sends requests to a server in UpdateStatusAsync, UpdateStatus, and other methods.
            Responses from these requests can be accessed using GetRawResponse.
            </remarks>
        </member>
        <member name="M:Azure.Core.ProtocolOperation`1.UpdateStatus(System.Threading.CancellationToken)">
            <summary>
            Calls the server to get updated status of the long-running operation.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the service call.</param><returns>The HTTP response received from the server.</returns><remarks>
            This operation will update the value returned from GetRawResponse and might update HasCompleted.
            </remarks>
        </member>
        <member name="M:Azure.Core.ProtocolOperation`1.UpdateStatusAsync(System.Threading.CancellationToken)">
            <summary>
            Calls the server to get updated status of the long-running operation.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the service call.</param><returns>The HTTP response received from the server.</returns><remarks>
            This operation will update the value returned from GetRawResponse and might update HasCompleted.
            </remarks>
        </member>
        <member name="M:Azure.Core.ProtocolOperation`1.WaitForCompletionAsync(System.Threading.CancellationToken)">
            <summary>
            Periodically calls the server till the long-running operation completes.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the periodical service calls.</param><returns>The last HTTP response received from the server.</returns><remarks>
            This method will periodically call UpdateStatusAsync till HasCompleted is true, then return the final result of the operation.
            </remarks>
        </member>
        <member name="M:Azure.Core.ProtocolOperation`1.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Periodically calls the server till the long-running operation completes.
            </summary><param name="pollingInterval">
            The interval between status requests to the server.
            The interval can change based on information returned from the server.
            For example, the server might communicate to the client that there is not reason to poll for status change sooner than some time.
            </param><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the periodical service calls.</param><returns>The last HTTP response received from the server.</returns><remarks>
            This method will periodically call UpdateStatusAsync till HasCompleted is true, then return the final result of the operation.
            </remarks>
        </member>
        <member name="T:Azure.Core.AsyncLockWithValue`1">
            <summary>
            Primitive that combines async lock and value cache
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Azure.Core.AsyncLockWithValue`1.GetLockOrValueAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Method that either returns cached value or acquire a lock.
            If one caller has acquired a lock, other callers will be waiting for the lock to be released.
            If value is set, lock is released and all waiters get that value.
            If value isn't set, the next waiter in the queue will get the lock.
            </summary>
            <param name="async"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:Azure.Core.AsyncLockWithValue`1.LockOrValue.HasValue">
            <summary>
            Returns true if lock contains the cached value. Otherwise false.
            </summary>
        </member>
        <member name="P:Azure.Core.AsyncLockWithValue`1.LockOrValue.Value">
            <summary>
            Returns cached value if it was set when lock has been created. Throws exception otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">Value isn't set.</exception>
        </member>
        <member name="M:Azure.Core.AsyncLockWithValue`1.LockOrValue.SetValue(`0)">
            <summary>
            Set value to the cache and to all the waiters.
            </summary>
            <param name="value"></param>
            <exception cref="T:System.InvalidOperationException">Value is set already.</exception>
        </member>
        <member name="T:Azure.Core.OperationInternal">
            <summary>
            A helper class used to build long-running operation instances. In order to use this helper:
            <list type="number">
              <item>Make sure your LRO implements the <see cref="T:Azure.Core.IOperation" /> interface.</item>
              <item>Add a private <see cref="T:Azure.Core.OperationInternal" /> field to your LRO, and instantiate it during construction.</item>
              <item>Delegate method calls to the <see cref="T:Azure.Core.OperationInternal" /> implementations.</item>
            </list>
            Supported members:
            <list type="bullet">
              <item>
                <description><see cref="P:Azure.Core.OperationInternalBase.HasCompleted" /></description>
              </item>
              <item>
                <description><see cref="P:Azure.Core.OperationInternalBase.RawResponse" />, used for <see cref="M:Azure.Operation.GetRawResponse" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternalBase.UpdateStatus(System.Threading.CancellationToken)" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternalBase.UpdateStatusAsync(System.Threading.CancellationToken)" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternalBase.WaitForCompletionResponseAsync(System.Threading.CancellationToken)" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternalBase.WaitForCompletionResponseAsync(System.TimeSpan,System.Threading.CancellationToken)" /></description>
              </item>
            </list>
            </summary>
        </member>
        <member name="M:Azure.Core.OperationInternal.Succeeded(Azure.Response)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Core.OperationInternal" /> class in a final successful state.
            </summary>
            <param name="rawResponse">The final value of <see cref="P:Azure.Core.OperationInternalBase.RawResponse" />.</param>
        </member>
        <member name="M:Azure.Core.OperationInternal.Failed(Azure.Response,Azure.RequestFailedException)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Core.OperationInternal" /> class in a final failed state.
            </summary>
            <param name="rawResponse">The final value of <see cref="P:Azure.Core.OperationInternalBase.RawResponse" />.</param>
            <param name="operationFailedException">The exception that will be thrown by <c>UpdateStatusAsync</c>.</param>
        </member>
        <member name="M:Azure.Core.OperationInternal.#ctor(Azure.Core.IOperation,Azure.Core.Pipeline.ClientDiagnostics,Azure.Response,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},Azure.Core.DelayStrategy)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Core.OperationInternal" /> class.
            </summary>
            <param name="operation">The long-running operation making use of this class. Passing "<c>this</c>" is expected.</param>
            <param name="clientDiagnostics">Used for diagnostic scope and exception creation. This is expected to be the instance created during the construction of your main client.</param>
            <param name="rawResponse">
                The initial value of <see cref="P:Azure.Core.OperationInternalBase.RawResponse" />. Usually, long-running operation objects can be instantiated in two ways:
                <list type="bullet">
                    <item>
                        When calling a client's "<c>Start&lt;OperationName&gt;</c>" method, a service call is made to start the operation, and an <see cref="T:Azure.Operation" /> instance is returned.
                        In this case, the response received from this service call can be passed here.
                    </item>
                    <item>
                        When a user instantiates an <see cref="T:Azure.Operation" /> directly using a public constructor, there's no previous service call. In this case, passing <c>null</c> is expected.
                    </item>
                </list>
            </param>
            <param name="operationTypeName">
                The type name of the long-running operation making use of this class. Used when creating diagnostic scopes. If left <c>null</c>, the type name will be inferred based on the
                parameter <paramref name="operation" />.
            </param>
            <param name="scopeAttributes">The attributes to use during diagnostic scope creation.</param>
            <param name="fallbackStrategy"> The delay strategy to use. Default is <see cref="T:Azure.Core.FixedDelayWithNoJitterStrategy" />.</param>
        </member>
        <member name="T:Azure.Core.IOperation">
            <summary>
            An interface used by <see cref="T:Azure.Core.OperationInternal" /> for making service calls and updating state. It's expected that
            your long-running operation classes implement this interface.
            </summary>
        </member>
        <member name="M:Azure.Core.IOperation.UpdateStateAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Calls the service and updates the state of the long-running operation. Properties directly handled by the
            <see cref="T:Azure.Core.OperationInternal" /> class, such as <see cref="P:Azure.Core.OperationInternalBase.RawResponse" />
            don't need to be updated. Operation-specific properties, such as "<c>CreateOn</c>" or "<c>LastModified</c>",
            must be manually updated by the operation implementing this method.
            <example>Usage example:
            <code>
              async ValueTask&lt;OperationState&gt; IOperation.UpdateStateAsync(bool async, CancellationToken cancellationToken)<br />
              {<br />
                Response&lt;R&gt; response = async ? &lt;async service call&gt; : &lt;sync service call&gt;;<br />
                if (&lt;operation succeeded&gt;) return OperationState.Success(response.GetRawResponse(), &lt;parse response&gt;);<br />
                if (&lt;operation failed&gt;) return OperationState.Failure(response.GetRawResponse());<br />
                return OperationState.Pending(response.GetRawResponse());<br />
              }
            </code>
            </example>
            </summary>
            <param name="async"><c>true</c> if the call should be executed asynchronously. Otherwise, <c>false</c>.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>
            A structure indicating the current operation state. The <see cref="T:Azure.Core.OperationState" /> structure must be instantiated by one of
            its static methods:
            <list type="bullet">
              <item>Use <see cref="M:Azure.Core.OperationState.Success(Azure.Response)" /> when the operation has completed successfully.</item>
              <item>Use <see cref="M:Azure.Core.OperationState.Failure(Azure.Response,Azure.RequestFailedException)" /> when the operation has completed with failures.</item>
              <item>Use <see cref="M:Azure.Core.OperationState.Pending(Azure.Response)" /> when the operation has not completed yet.</item>
            </list>
            </returns>
        </member>
        <member name="T:Azure.Core.OperationState">
            <summary>
            A helper structure passed to <see cref="T:Azure.Core.OperationInternal" /> to indicate the current operation state. This structure must be
            instantiated by one of its static methods, depending on the operation state:
            <list type="bullet">
              <item>Use <see cref="M:Azure.Core.OperationState.Success(Azure.Response)" /> when the operation has completed successfully.</item>
              <item>Use <see cref="M:Azure.Core.OperationState.Failure(Azure.Response,Azure.RequestFailedException)" /> when the operation has completed with failures.</item>
              <item>Use <see cref="M:Azure.Core.OperationState.Pending(Azure.Response)" /> when the operation has not completed yet.</item>
            </list>
            </summary>
        </member>
        <member name="M:Azure.Core.OperationState.Success(Azure.Response)">
            <summary>
            Instantiates an <see cref="T:Azure.Core.OperationState" /> indicating the operation has completed successfully.
            </summary>
            <param name="rawResponse">The HTTP response obtained during the status update.</param>
            <returns>A new <see cref="T:Azure.Core.OperationState" /> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="rawResponse" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Azure.Core.OperationState.Failure(Azure.Response,Azure.RequestFailedException)">
            <summary>
            Instantiates an <see cref="T:Azure.Core.OperationState" /> indicating the operation has completed with failures.
            </summary>
            <param name="rawResponse">The HTTP response obtained during the status update.</param>
            <param name="operationFailedException">
            The exception to throw from <c>UpdateStatus</c> because of the operation failure. If left <c>null</c>,
            a default exception is created based on the <paramref name="rawResponse" /> parameter.
            </param>
            <returns>A new <see cref="T:Azure.Core.OperationState" /> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="rawResponse" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Azure.Core.OperationState.Pending(Azure.Response)">
            <summary>
            Instantiates an <see cref="T:Azure.Core.OperationState" /> indicating the operation has not completed yet.
            </summary>
            <param name="rawResponse">The HTTP response obtained during the status update.</param>
            <returns>A new <see cref="T:Azure.Core.OperationState" /> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="rawResponse" /> is <c>null</c>.</exception>
        </member>
        <member name="P:Azure.Core.OperationInternalBase.RawResponse">
            <summary>
            The last HTTP response received from the server. Its update already handled in calls to "<c>UpdateStatus</c>" and
            "<c>WaitForCompletionAsync</c>", but custom methods not supported by this class, such as "<c>CancelOperation</c>",
            must update it as well.
            <example>Usage example:
            <code>
              public Response GetRawResponse() =&gt; _operationInternal.RawResponse;
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Azure.Core.OperationInternalBase.HasCompleted">
            <summary>
            Returns <c>true</c> if the long-running operation has completed.
            <example>Usage example:
            <code>
              public bool HasCompleted =&gt; _operationInternal.HasCompleted;
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Azure.Core.OperationInternalBase.UpdateStatusAsync(System.Threading.CancellationToken)">
            <summary>
            Calls the server to get the latest status of the long-running operation, handling diagnostic scope creation for distributed
            tracing. The default scope name can be changed with the "<c>operationTypeName</c>" parameter passed to the constructor.
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&gt; UpdateStatusAsync(CancellationToken cancellationToken) =&gt;
                await _operationInternal.UpdateStatusAsync(cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The HTTP response received from the server.</returns>
            <remarks>
            After a successful run, this method will update <see cref="P:Azure.Core.OperationInternalBase.RawResponse" /> and might update <see cref="P:Azure.Core.OperationInternalBase.HasCompleted" />.
            </remarks>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternalBase.UpdateStatus(System.Threading.CancellationToken)">
            <summary>
            Calls the server to get the latest status of the long-running operation, handling diagnostic scope creation for distributed
            tracing. The default scope name can be changed with the "<c>operationTypeName</c>" parameter passed to the constructor.
            <example>Usage example:
            <code>
              public Response UpdateStatus(CancellationToken cancellationToken) =&gt; _operationInternal.UpdateStatus(cancellationToken);
            </code>
            </example>
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The HTTP response received from the server.</returns>
            <remarks>
            After a successful run, this method will update <see cref="P:Azure.Core.OperationInternalBase.RawResponse" /> and might update <see cref="P:Azure.Core.OperationInternalBase.HasCompleted" />.
            </remarks>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternalBase.WaitForCompletionResponseAsync(System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatusAsync(System.Threading.CancellationToken)" /> until the long-running operation completes.
            After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed.  The maximum of the retry after value and the fallback strategy
            is then used as the wait interval.
            Headers supported are: "Retry-After", "retry-after-ms", and "x-ms-retry-after-ms",
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternalBase.WaitForCompletionResponseAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatusAsync(System.Threading.CancellationToken)" /> until the long-running operation completes. The interval
            between calls is defined by the parameter <paramref name="pollingInterval" />, but it can change based on information returned
            from the server. After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed. In this case, the maximum value between the <paramref name="pollingInterval" />
            parameter and the retry-after header is chosen as the wait interval. Headers supported are: "Retry-After", "retry-after-ms",
            and "x-ms-retry-after-ms".
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(TimeSpan pollingInterval, CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(pollingInterval, cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="pollingInterval">The interval between status requests to the server. <strong></strong></param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternalBase.WaitForCompletionResponse(System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatus(System.Threading.CancellationToken)" /> until the long-running operation completes.
            After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed.  The maximum of the retry after value and the fallback strategy
            is then used as the wait interval.
            Headers supported are: "Retry-After", "retry-after-ms", and "x-ms-retry-after-ms",
            and "x-ms-retry-after-ms".
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(TimeSpan pollingInterval, CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(pollingInterval, cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternalBase.WaitForCompletionResponse(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatus(System.Threading.CancellationToken)" /> until the long-running operation completes. The interval
            between calls is defined by the parameter <paramref name="pollingInterval" />, but it can change based on information returned
            from the server. After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed. In this case, the maximum value between the <paramref name="pollingInterval" />
            parameter and the retry-after header is chosen as the wait interval. Headers supported are: "Retry-After", "retry-after-ms",
            and "x-ms-retry-after-ms".
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(TimeSpan pollingInterval, CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(pollingInterval, cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="pollingInterval">The interval between status requests to the server.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="T:Azure.Core.OperationInternal`1">
            <summary>
            A helper class used to build long-running operation instances. In order to use this helper:
            <list type="number">
              <item>Make sure your LRO implements the <see cref="T:Azure.Core.IOperation`1" /> interface.</item>
              <item>Add a private <see cref="T:Azure.Core.OperationInternal`1" /> field to your LRO, and instantiate it during construction.</item>
              <item>Delegate method calls to the <see cref="T:Azure.Core.OperationInternal`1" /> implementations.</item>
            </list>
            Supported members:
            <list type="bullet">
              <item>
                <description><see cref="P:Azure.Core.OperationInternal`1.HasValue" /></description>
              </item>
              <item>
                <description><see cref="P:Azure.Core.OperationInternalBase.HasCompleted" /></description>
              </item>
              <item>
                <description><see cref="P:Azure.Core.OperationInternal`1.Value" /></description>
              </item>
              <item>
                <description><see cref="P:Azure.Core.OperationInternalBase.RawResponse" />, used for <see cref="M:Azure.Operation.GetRawResponse" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternalBase.UpdateStatus(System.Threading.CancellationToken)" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternalBase.UpdateStatusAsync(System.Threading.CancellationToken)" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternal`1.WaitForCompletionAsync(System.Threading.CancellationToken)" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternal`1.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)" /></description>
              </item>
            </list>
            </summary>
            <typeparam name="T">The final result of the long-running operation. Must match the type used in <see cref="T:Azure.Operation`1" />.</typeparam>
        </member>
        <member name="M:Azure.Core.OperationInternal`1.Succeeded(Azure.Response,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Core.OperationInternal" /> class in a final successful state.
            </summary>
            <param name="rawResponse">The final value of <see cref="P:Azure.Core.OperationInternalBase.RawResponse" />.</param>
            <param name="value">The final result of the long-running operation.</param>
        </member>
        <member name="M:Azure.Core.OperationInternal`1.Failed(Azure.Response,Azure.RequestFailedException)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Core.OperationInternal" /> class in a final failed state.
            </summary>
            <param name="rawResponse">The final value of <see cref="P:Azure.Core.OperationInternalBase.RawResponse" />.</param>
            <param name="operationFailedException">The exception that will be thrown by <c>UpdateStatusAsync</c>.</param>
        </member>
        <member name="M:Azure.Core.OperationInternal`1.#ctor(Azure.Core.IOperation{`0},Azure.Core.Pipeline.ClientDiagnostics,Azure.Response,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},Azure.Core.DelayStrategy)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Core.OperationInternal`1" /> class.
            </summary>
            <param name="operation">The long-running operation making use of this class. Passing "<c>this</c>" is expected.</param>
            <param name="clientDiagnostics">Used for diagnostic scope and exception creation. This is expected to be the instance created during the construction of your main client.</param>
            <param name="rawResponse">
                The initial value of <see cref="P:Azure.Core.OperationInternalBase.RawResponse" />. Usually, long-running operation objects can be instantiated in two ways:
                <list type="bullet">
                    <item>
                        When calling a client's "<c>Start&lt;OperationName&gt;</c>" method, a service call is made to start the operation, and an <see cref="T:Azure.Operation`1" /> instance is returned.
                        In this case, the response received from this service call can be passed here.
                    </item>
                    <item>
                        When a user instantiates an <see cref="T:Azure.Operation`1" /> directly using a public constructor, there's no previous service call. In this case, passing <c>null</c> is expected.
                    </item>
                </list>
            </param>
            <param name="operationTypeName">
                The type name of the long-running operation making use of this class. Used when creating diagnostic scopes. If left <c>null</c>, the type name will be inferred based on the
                parameter <paramref name="operation" />.
            </param>
            <param name="scopeAttributes">The attributes to use during diagnostic scope creation.</param>
            <param name="fallbackStrategy">The delay strategy when Retry-After header is not present.  When it is present, the longer of the two delays will be used.
                Default is <see cref="T:Azure.Core.FixedDelayWithNoJitterStrategy" />.</param>
        </member>
        <member name="P:Azure.Core.OperationInternal`1.HasValue">
            <summary>
            Returns <c>true</c> if the long-running operation completed successfully and has produced a final result.
            <example>Usage example:
            <code>
              public bool HasValue =&gt; _operationInternal.HasValue;
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Azure.Core.OperationInternal`1.Value">
            <summary>
            The final result of the long-running operation.
            <example>Usage example:
            <code>
              public T Value =&gt; _operationInternal.Value;
            </code>
            </example>
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the operation has not completed yet.</exception>
            <exception cref="T:Azure.RequestFailedException">Thrown when the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternal`1.WaitForCompletionAsync(System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatusAsync(System.Threading.CancellationToken)" /> until the long-running operation completes.
            After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed.
            Headers supported are: "Retry-After", "retry-after-ms", and "x-ms-retry-after-ms",
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternal`1.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatusAsync(System.Threading.CancellationToken)" /> until the long-running operation completes. The interval
            between calls is defined by the parameter <paramref name="pollingInterval" />, but it can change based on information returned
            from the server. After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed. In this case, the maximum value between the <paramref name="pollingInterval" />
            parameter and the retry-after header is chosen as the wait interval. Headers supported are: "Retry-After", "retry-after-ms",
            and "x-ms-retry-after-ms".
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(TimeSpan pollingInterval, CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(pollingInterval, cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="pollingInterval">The interval between status requests to the server.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternal`1.WaitForCompletion(System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatus(System.Threading.CancellationToken)" /> until the long-running operation completes.
            After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed.
            Headers supported are: "Retry-After", "retry-after-ms", and "x-ms-retry-after-ms",
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternal`1.WaitForCompletion(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatus(System.Threading.CancellationToken)" /> until the long-running operation completes. The interval
            between calls is defined by the <see cref="T:Azure.Core.FixedDelayWithNoJitterStrategy" />, which takes into account any retry-after header that is returned
            from the server.
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="pollingInterval">The interval between status requests to the server.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="T:Azure.Core.IOperation`1">
            <summary>
            An interface used by <see cref="T:Azure.Core.OperationInternal`1" /> for making service calls and updating state. It's expected that
            your long-running operation classes implement this interface.
            </summary>
            <typeparam name="T">The final result of the long-running operation. Must match the type used in <see cref="T:Azure.Operation`1" />.</typeparam>
        </member>
        <member name="M:Azure.Core.IOperation`1.UpdateStateAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Calls the service and updates the state of the long-running operation. Properties directly handled by the
            <see cref="T:Azure.Core.OperationInternal`1" /> class, such as <see cref="P:Azure.Core.OperationInternalBase.RawResponse" /> or
            <see cref="P:Azure.Core.OperationInternal`1.Value" />, don't need to be updated. Operation-specific properties, such
            as "<c>CreateOn</c>" or "<c>LastModified</c>", must be manually updated by the operation implementing this
            method.
            <example>Usage example:
            <code>
              async ValueTask&lt;OperationState&lt;T&gt;&gt; IOperation&lt;T&gt;.UpdateStateAsync(bool async, CancellationToken cancellationToken)<br />
              {<br />
                Response&lt;R&gt; response = async ? &lt;async service call&gt; : &lt;sync service call&gt;;<br />
                if (&lt;operation succeeded&gt;) return OperationState&lt;T&gt;.Success(response.GetRawResponse(), &lt;parse response&gt;);<br />
                if (&lt;operation failed&gt;) return OperationState&lt;T&gt;.Failure(response.GetRawResponse());<br />
                return OperationState&lt;T&gt;.Pending(response.GetRawResponse());<br />
              }
            </code>
            </example>
            </summary>
            <param name="async"><c>true</c> if the call should be executed asynchronously. Otherwise, <c>false</c>.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>
            A structure indicating the current operation state. The <see cref="T:Azure.Core.OperationState`1" /> structure must be instantiated by one of
            its static methods:
            <list type="bullet">
              <item>Use <see cref="M:Azure.Core.OperationState`1.Success(Azure.Response,`0)" /> when the operation has completed successfully.</item>
              <item>Use <see cref="M:Azure.Core.OperationState`1.Failure(Azure.Response,Azure.RequestFailedException)" /> when the operation has completed with failures.</item>
              <item>Use <see cref="M:Azure.Core.OperationState`1.Pending(Azure.Response)" /> when the operation has not completed yet.</item>
            </list>
            </returns>
        </member>
        <member name="T:Azure.Core.OperationState`1">
            <summary>
            A helper structure passed to <see cref="T:Azure.Core.OperationInternal`1" /> to indicate the current operation state. This structure must be
            instantiated by one of its static methods, depending on the operation state:
            <list type="bullet">
              <item>Use <see cref="M:Azure.Core.OperationState`1.Success(Azure.Response,`0)" /> when the operation has completed successfully.</item>
              <item>Use <see cref="M:Azure.Core.OperationState`1.Failure(Azure.Response,Azure.RequestFailedException)" /> when the operation has completed with failures.</item>
              <item>Use <see cref="M:Azure.Core.OperationState`1.Pending(Azure.Response)" /> when the operation has not completed yet.</item>
            </list>
            </summary>
            <typeparam name="T">The final result of the long-running operation. Must match the type used in <see cref="T:Azure.Operation`1" />.</typeparam>
        </member>
        <member name="M:Azure.Core.OperationState`1.Success(Azure.Response,`0)">
            <summary>
            Instantiates an <see cref="T:Azure.Core.OperationState`1" /> indicating the operation has completed successfully.
            </summary>
            <param name="rawResponse">The HTTP response obtained during the status update.</param>
            <param name="value">The final result of the long-running operation.</param>
            <returns>A new <see cref="T:Azure.Core.OperationState`1" /> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="rawResponse" /> or <paramref name="value" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Azure.Core.OperationState`1.Failure(Azure.Response,Azure.RequestFailedException)">
            <summary>
            Instantiates an <see cref="T:Azure.Core.OperationState`1" /> indicating the operation has completed with failures.
            </summary>
            <param name="rawResponse">The HTTP response obtained during the status update.</param>
            <param name="operationFailedException">
            The exception to throw from <c>UpdateStatus</c> because of the operation failure. The same exception will be thrown when
            <see cref="P:Azure.Core.OperationInternal`1.Value" /> is called. If left <c>null</c>, a default exception is created based on the
            <paramref name="rawResponse" /> parameter.
            </param>
            <returns>A new <see cref="T:Azure.Core.OperationState`1" /> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="rawResponse" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Azure.Core.OperationState`1.Pending(Azure.Response)">
            <summary>
            Instantiates an <see cref="T:Azure.Core.OperationState`1" /> indicating the operation has not completed yet.
            </summary>
            <param name="rawResponse">The HTTP response obtained during the status update.</param>
            <returns>A new <see cref="T:Azure.Core.OperationState`1" /> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="rawResponse" /> is <c>null</c>.</exception>
        </member>
        <member name="T:Azure.Core.SequentialDelayStrategy">
            <summary>
            A delay strategy that uses a fixed sequence of delays with no jitter applied. This is used by management LROs.
            </summary>
        </member>
        <member name="T:Azure.Core.FixedDelayWithNoJitterStrategy">
            <summary>
            A delay strategy that uses a fixed delay with no jitter applied. This is used by data plane LROs.
            </summary>
        </member>
        <member name="T:Azure.Core.OperationPoller">
            <summary>
            Implementation of LRO polling logic.
            </summary>
        </member>
        <member name="M:Azure.Core.Pipeline.ClientDiagnostics.#ctor(Azure.Core.ClientOptions,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Core.Pipeline.ClientDiagnostics" /> class.
            </summary>
            <param name="options">The customer provided client options object.</param>
            <param name="suppressNestedClientActivities">Flag controlling if <see cref="T:System.Diagnostics.Activity" />
             created by this <see cref="T:Azure.Core.Pipeline.ClientDiagnostics" /> for client method calls should be suppressed when called
             by other Azure SDK client methods.  It's recommended to set it to true for new clients; use default (null)
             for backward compatibility reasons, or set it to false to explicitly disable suppression for specific cases.
             The default value could change in the future, the flag should be only set to false if suppression for the client
             should never be enabled.</param>
        </member>
        <member name="M:Azure.Core.Pipeline.ClientDiagnostics.#ctor(System.String,System.String,Azure.Core.DiagnosticsOptions,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Core.Pipeline.ClientDiagnostics" /> class.
            </summary>
            <param name="optionsNamespace">Namespace of the client class, such as Azure.Storage or Azure.AppConfiguration.</param>
            <param name="providerNamespace">Azure Resource Provider namespace of the Azure service SDK is primarily used for.</param>
            <param name="diagnosticsOptions">The customer provided client diagnostics options.</param>
            <param name="suppressNestedClientActivities">Flag controlling if <see cref="T:System.Diagnostics.Activity" />
             created by this <see cref="T:Azure.Core.Pipeline.ClientDiagnostics" /> for client method calls should be suppressed when called
             by other Azure SDK client methods.  It's recommended to set it to true for new clients, use default (null) for old clients
             for backward compatibility reasons, or set it to false to explicitly disable suppression for specific cases.
             The default value could change in the future, the flag should be only set to false if suppression for the client
             should never be enabled.</param>
        </member>
        <member name="M:Azure.Core.Pipeline.DiagnosticScope.AddLink(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Adds a link to the scope. This must be called before <see cref="M:Azure.Core.Pipeline.DiagnosticScope.Start" /> has been called for the DiagnosticScope.
            </summary>
            <param name="traceparent">The traceparent for the link.</param>
            <param name="tracestate">The tracestate for the link.</param>
            <param name="attributes">Optional attributes to associate with the link.</param>
        </member>
        <member name="M:Azure.Core.Pipeline.DiagnosticScope.SetTraceContext(System.String,System.String)">
            <summary>
            Sets the trace context for the current scope.
            </summary>
            <param name="traceparent">The trace parent to set for the current scope.</param>
            <param name="tracestate">The trace state to set for the current scope.</param>
        </member>
        <member name="M:Azure.Core.Pipeline.DiagnosticScope.Failed(System.Exception)">
            <summary>
            Marks the scope as failed.
            </summary>
            <param name="exception">The exception to associate with the failed scope.</param>
        </member>
        <member name="T:Azure.Core.Pipeline.DiagnosticScope.ActivityKind">
            <summary>
            Kind describes the relationship between the Activity, its parents, and its children in a Trace.
            </summary>
        </member>
        <member name="F:Azure.Core.Pipeline.DiagnosticScope.ActivityKind.Internal">
            <summary>
            Default value.
            Indicates that the Activity represents an internal operation within an application, as opposed to an operations with remote parents or children.
            </summary>
        </member>
        <member name="F:Azure.Core.Pipeline.DiagnosticScope.ActivityKind.Server">
            <summary>
            Server activity represents request incoming from external component.
            </summary>
        </member>
        <member name="F:Azure.Core.Pipeline.DiagnosticScope.ActivityKind.Client">
            <summary>
            Client activity represents outgoing request to the external component.
            </summary>
        </member>
        <member name="F:Azure.Core.Pipeline.DiagnosticScope.ActivityKind.Producer">
            <summary>
            Producer activity represents output provided to external components.
            </summary>
        </member>
        <member name="F:Azure.Core.Pipeline.DiagnosticScope.ActivityKind.Consumer">
            <summary>
            Consumer activity represents output received from an external component.
            </summary>
        </member>
        <member name="T:Azure.Core.Pipeline.ActivityExtensions">
            <summary>
            Until we can reference the 5.0 of System.Diagnostics.DiagnosticSource
            </summary>
        </member>
        <member name="T:Azure.Core.Pipeline.TaskExtensions.Enumerable`1">
            <summary>
            Both <see cref="T:Azure.Core.Pipeline.TaskExtensions.Enumerable`1" /> and <see cref="T:Azure.Core.Pipeline.TaskExtensions.Enumerator`1" /> are defined as public structs so that foreach can use duck typing
            to call <see cref="M:Azure.Core.Pipeline.TaskExtensions.Enumerable`1.GetEnumerator" /> and avoid heap memory allocation.
            Please don't delete this method and don't make these types private.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Azure.Core.Argument">
            <summary>
            Argument validation.
            </summary>
            <remarks>
              <para>This class should be shared via source using Azure.Core.props and contain only common argument validation.
                It is declared partial so that you can use the same familiar class name but extend it with project-specific validation.
                To extend the functionality of this class, just declare your own partial <see cref="T:Azure.Core.Argument" /> class with project-specific methods.
              </para>
              <para>
                Be sure to document exceptions thrown by these methods on your public methods.
              </para>
            </remarks>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotNull``1(``0,System.String)">
            <summary>
            Throws if <paramref name="value" /> is null.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is null.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotNull``1(System.Nullable{``0},System.String)">
            <summary>
            Throws if <paramref name="value" /> has not been initialized.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> has not been initialized.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Throws if <paramref name="value" /> is null or an empty collection.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is an empty collection.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is null.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotNullOrEmpty(System.String,System.String)">
            <summary>
            Throws if <paramref name="value" /> is null or an empty string.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is an empty string.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is null.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotNullOrWhiteSpace(System.String,System.String)">
            <summary>
            Throws if <paramref name="value" /> is null, an empty string, or consists only of white-space characters.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is an empty string or consists only of white-space characters.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is null.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotDefault``1(``0@,System.String)">
            <summary>
            Throws if <paramref name="value" /> is the default value for type <typeparamref name="T" />.
            </summary>
            <typeparam name="T">The type of structure to validate which implements <see cref="T:System.IEquatable`1" />.</typeparam>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is the default value for type <typeparamref name="T" />.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertInRange``1(``0,``0,``0,System.String)">
            <summary>
            Throws if <paramref name="value" /> is less than the <paramref name="minimum" /> or greater than the <paramref name="maximum" />.
            </summary>
            <typeparam name="T">The type of to validate which implements <see cref="T:System.IComparable`1" />.</typeparam>
            <param name="value">The value to validate.</param>
            <param name="minimum">The minimum value to compare.</param>
            <param name="maximum">The maximum value to compare.</param>
            <param name="name">The name of the parameter.</param>
        </member>
        <member name="M:Azure.Core.Argument.AssertEnumDefined(System.Type,System.Object,System.String)">
            <summary>
            Throws if <paramref name="value" /> is not defined for <paramref name="enumType" />.
            </summary>
            <param name="enumType">The type to validate against.</param>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is not defined for <paramref name="enumType" />.</exception>
        </member>
        <member name="M:Azure.Core.Argument.CheckNotNull``1(``0,System.String)">
            <summary>
            Throws if <paramref name="value" /> has not been initialized; otherwise, returns <paramref name="value" />.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> has not been initialized.</exception>
        </member>
        <member name="M:Azure.Core.Argument.CheckNotNullOrEmpty(System.String,System.String)">
            <summary>
            Throws if <paramref name="value" /> is null or an empty string; otherwise, returns <paramref name="value" />.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is an empty string.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is null.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNull``1(``0,System.String,System.String)">
            <summary>
            Throws if <paramref name="value" /> is not null.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <param name="message">The error message.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is not null.</exception>
        </member>
        <member name="T:Azure.Core.AppContextSwitchHelper">
            <summary>
            Helper for interacting with AppConfig settings and their related Environment variable settings.
            </summary>
        </member>
        <member name="M:Azure.Core.AppContextSwitchHelper.GetConfigValue(System.String,System.String)">
            <summary>
            Determines if either an AppContext switch or its corresponding Environment Variable is set
            </summary>
            <param name="appContexSwitchName">Name of the AppContext switch.</param>
            <param name="environmentVariableName">Name of the Environment variable.</param>
            <returns>If the AppContext switch has been set, returns the value of the switch.
            If the AppContext switch has not been set, returns the value of the environment variable.
            False if neither is set.
            </returns>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>
            Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue" />, the parameter will not be null even if the corresponding type allows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>Specifies that the output will be non-null if the named parameter is non-null.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with the associated parameter name.</summary>
            <param name="parameterName">
            The associated parameter name.  The output will be non-null if the argument to the parameter specified is non-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>Gets the associated parameter name.</summary>
        </member>
        <member name="M:Azure.Core.ChangeTrackingDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary><returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:Azure.Core.ChangeTrackingDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Keys">
            <summary>Gets an enumerable collection that contains the keys in the read-only dictionary.</summary><returns>An enumerable collection that contains the keys in the read-only dictionary.</returns>
        </member>
        <member name="P:Azure.Core.ChangeTrackingDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Values">
            <summary>Gets an enumerable collection that contains the values in the read-only dictionary.</summary><returns>An enumerable collection that contains the values in the read-only dictionary.</returns>
        </member>
        <member name="M:Azure.Core.ChangeTrackingList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary><returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Internals.AzMonList.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary><returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Azure.Core.Pipeline.TaskExtensions.Enumerable`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary><returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Azure.Core.Pipeline.TaskExtensions.Enumerable`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary><returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:Azure.Core.Pipeline.TaskExtensions.Enumerator`1.System#Collections#IEnumerator#Current">
            <summary>Gets the element in the collection at the current position of the enumerator.</summary><returns>The element in the collection at the current position of the enumerator.</returns>
        </member>
        <member name="M:Azure.Monitor.OpenTelemetry.Exporter.Internals.AzMonList.Enumerator.System#Collections#IEnumerator#Reset">
            <summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary><exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
        </member>
    </members>
</doc>
